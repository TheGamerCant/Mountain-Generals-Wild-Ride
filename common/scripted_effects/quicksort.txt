#Full credit to Yard1!!!!

quicksort = {
	# set up the auxilary stack
	set_temp_variable = { stack_size = high }
	subtract_from_temp_variable = { stack_size = low }
	add_to_temp_variable = { stack_size = 1 }
	resize_temp_array = {
		array = stack
		value = 0
		size = stack_size
	}

	set_temp_variable = { top = 0 }
	set_temp_variable = { stack^top = low }
	add_to_temp_variable = { top = 1 }
	set_temp_variable = { stack^top = high }

	while_loop_effect = {
		limit = { 
			check_variable = {
				var = top
				value = 0
				compare = greater_than_or_equals
			}
		}
		set_variable = { high = stack^top }
		subtract_from_temp_variable = { top = 1 }
		set_variable = { low = stack^top }
		subtract_from_temp_variable = { top = 1 }

		quicksort_partition = yes # returns qs_partition_return

		set_temp_variable = { qs_partition_return_plus_1 = qs_partition_return }
		set_temp_variable = { qs_partition_return_minus_1 = qs_partition_return }
		add_to_temp_variable = { qs_partition_return_plus_1 = 1 } 
		subtract_from_temp_variable = { qs_partition_return_minus_1 = 1 } 

		if = {
			limit = { check_variable = { qs_partition_return_minus_1 > low } }
			add_to_temp_variable = { top = 1 }
			set_temp_variable = { stack^top = low }
			add_to_temp_variable = { top = 1 }
			set_temp_variable = { stack^top = qs_partition_return_minus_1 }
		}

		if = {
			limit = { check_variable = { qs_partition_return_plus_1 < high } }
			add_to_temp_variable = { top = 1 }
			set_temp_variable = { stack^top = qs_partition_return_plus_1 }
			add_to_temp_variable = { top = 1 }
			set_temp_variable = { stack^top = high }
		}
	}

	# clear "temporary" variables
	clear_variable = qs_partition_return
	clear_variable = random_pivot
}

# Partition function (using a random pivot)
quicksort_partition = {
	# Get random pivot
	set_variable = { random_pivot = random }
	multiply_variable = { random_pivot = high }
	round_variable = random_pivot
	add_to_variable = { random_pivot = low }
	clamp_variable = {
		var = random_pivot
		min = low
		max = high
	}
	set_temp_variable = { swap = arr^high }
	set_variable = { arr^high = arr^random_pivot }
	set_variable = { arr^random_pivot = swap }

	set_temp_variable = { idx = low }
	subtract_from_temp_variable = { idx = 1 }

	set_temp_variable = { min = arr^high }
  
	for_loop_effect = {
		start = low
		end = high
		if = {
			limit = {
				check_variable = {
					var = arr^v
					value = min
					compare = less_than_or_equals # can be changed to greater_than_or_equals to give reverse order
				}
			}
			add_to_temp_variable = { idx = 1 }
			set_temp_variable = { swap = arr^idx }
			set_variable = { arr^idx = arr^v }
			set_variable = { arr^v = swap }
		}
	}

	add_to_temp_variable = { idx = 1 }
	set_temp_variable = { swap = arr^idx }
	set_variable = { arr^idx = arr^high }
	set_variable = { arr^high = swap }

	# we return the index
    set_variable = { qs_partition_return = idx }
}